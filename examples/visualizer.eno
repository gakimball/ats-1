0x21 0x2c range const colors!
[] var lines!
0 var frame!
:false var playing!
gfx/pal 1 0x28 set gfx/pal!

tup line{} .pitch .velocity .color end

#files ~if?
  first file/play()
  :true playing!
end

fn game()
  cls()

  playing if?
    ( List of notes currently being played )
    #notes
      [[ .pitch ]] map
      let notes!

    ( Remove lines for notes that have stopped playing )
    lines
      [[ notes _ .pitch has ]] filter
      let current-lines!

    ( Add new lines for notes that just began playing )
    #notes-pressed
      [[ note->line() ]] map
      let new-lines!

    ( Combine the two lists of lines and draw each one )
    current-lines
      new-lines concat
      [[ line/draw() ]] ~each
      lines!
  else
    draw-error()
  end

  frame 1 + frame!
end

( note{} -- line{} )
fn note->line()
  let note!

  line{->}
    note copy
    colors list/random() .color!
end

( line{} -- )
fn line/draw()
  let line!

  rect{->}
    line .pitch .x!
    1 .w!
    gfx/tv .h .h!
  line .color
  rect()
end

( -- color )
fn list/random()
  let list!
  list length 1 -
    let max!

  list 0 max random() get
end

( -- )
fn draw-error()
  16 60 vec{} 'No MIDI file!' text()
end
