[ 0x0d 0x28 0x0d 0x0d ] const ats/pal!
[ 0x2c 0x23 0x25 ] const rainbow/colors!
14 const rainbow/width!
gfx/tv .h const rainbow/max-height!

0 var frame!

midi/route()

fn game()
  [ 0 1 2 ] [[ draw-rainbow() ]] each

  frame 120 - if?
    draw-text()
  end

  frame 1 + frame!
end

( n -- )
fn draw-rainbow()
  let idx!
  15 idx *
    let delay!
  rainbow/colors idx get
    let color!

  rect{->}
    rainbow/width idx * 42 +
      .x!
    rainbow/width
      .w!
    frame delay - 2 * rainbow/max-height min()
      .h!
    [[ .h ]] [[ color rect() ]] applyif
end

( -- )
fn draw-text()
  rect{->}
    42 .x! 56 .y! 16 .h!
    rainbow/width 3 * .w!
  0x0d rect()

  ats/pal gfx/pal!
  44 60 vec{} 'ATS-1' text()
  gfx/pal/default gfx/pal!
end

( a b -- min )
fn min()
  let b! let a!
  a b - if? b else a end
end
